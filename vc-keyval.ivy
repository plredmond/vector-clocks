#lang ivy1.8

include order
include collections

instance pid_t : iterable
instance clock_t : unbounded_sequence

module vc_t = {
    type this

    # concrete representation
    instance index_t : unbounded_sequence
    instance kv_t : keyval(index_t, pid_t, clock_t)
    individual kv : kv_t

    after init {
        var p:pid_t := 0;
        #while p <= pid_t.max {
        #    kv := kv.append_pair(p, 0);
        #}
        # 1) all possible keys are present
        # 2) all keys map to 0 value
        assert kv.key_at(I, K) -> kv.value_at(I) = 0; # seems to be not checked?
        assert false; # oh no
    }

    # interface
    action step(x:this, p:pid_t) returns (x:this)
    action merge(x:this, y:this) returns (x:this)
    action leq(x:this, y:this) returns (b:bool)
    action lt(x:this, y:this) returns (b:bool)
}

instance vc : vc_t
export vc.step
export vc.merge
export vc.leq
export vc.lt
