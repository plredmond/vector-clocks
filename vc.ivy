#lang ivy1.7

include order
include collections

# interface types
instance pid_t : iterable
instance clock_t : unbounded_sequence

module vc_t = {
    type this

    # abstract representation
    function clock(P:pid_t) : clock_t

    # concrete representation
    instance arr_t : array(pid_t, clock_t)
    individual arr : arr_t

    # tie the abstract representation to the concrete representation
    definition clock(P:pid_t) = arr.value(P)

    after init {
        arr := arr_t.create(pid_t.max, 0);
        assert pid_t.max = arr.end;
        arr := arr.append(0);
        assert pid_t.max + 1 = arr.end;
        assert clock(P) = 0;
    }

    invariant 0 <= P:pid_t
    invariant      P:pid_t <= pid_t.max
    invariant                 pid_t.max + 1 = arr.end
    invariant                 pid_t.max     < arr.end

    # interface
    action step(x:this, p:pid_t) returns (x:this)
    action merge(x:this, y:this) returns (x:this)
    action leq(x:this, y:this) returns (b:bool)
    action lt(x:this, y:this) returns (b:bool)

    specification {
    }

    implementation {
        implement step {
            arr := arr.set(p, arr.get(p).next);
        }
    }

}

instance vc : vc_t
export vc.step
export vc.merge
export vc.leq
export vc.lt
